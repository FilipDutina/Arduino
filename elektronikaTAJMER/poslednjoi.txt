#include <avr/io.h>
#include <avr/interrupt.h>

/*const unsigned char simboli[] = {
		0xc5, 0x26, 0xc4, 0xdd, 0xa6, 0x26, 0xff, 0x8c, 0x5, 0xc4, 0xff, 0xc5, 0x5, 0xc, 0xff, 0xff, 0xff, 0xff, 0x00	//jedite kod joa
}; //look-up tabela sa simbolima
const unsigned char simboli1[] = {
		0xc, 0x2e, 0xee, 0xdd, 0x27, 0x8c, 0xc, 0xff, 0x34, 0xa7, 0xc5, 0xdd, 0xe5, 0xc, 0xff, 0xfe, 0xff, 0xec, 0x26, 0xff, 0xe, 0xc, 0xc4, 0xc, 0xff, 0xff, 0xff, 0xff, 0x00};	//africka sljiva - ne pada*/
const unsigned char simboli[] = {
		0x5, 0xdd, 0x46, 0x54, 0x9c, 0x34, 0x24, 0x5d, 0x04, 0x14
}; //look-up tabela sa simbolima
unsigned char DISP_BAFER[4] = {
		0xfe, 0xfe, 0xfe, 0xfe
}; //bafer displeja
unsigned long millis = 0;
unsigned char disp = 3;
int ukljuceno = 0;
int sati = 22;
int minute = 55;
int sekunde = 0;
int flag = 0;
int prethodnoStanje;
int prethodnoStanje2;

ISR(TIMER0_COMPA_vect)
{
	//prekid tajmera 0 usled dostizanja vrednosti registra OCR0A
	if (++disp > 3)
		disp = 0;
	PORTB = ~(1 << (3-disp)); //ukljucenje tranzistora
	PORTD = DISP_BAFER[disp]; //ispis na trenutno aktivan displej
	millis++; //sistemsko vreme
}
ISR(PCINT1_vect)
{
	//prekid usled promene stanja pina PCINT10 ili pina PCINT8
	switch ((~PINC) & 0xf)
	{
		case 0x01:
		{
			ukljuceno = 1;	//levo
			flag = 1;
			break;
		}
		case 0x02:
		{
			ukljuceno = 2;	//dole
			break;
		}
		case 0x04:
		{
			ukljuceno = 3;	//desno
			flag = 2;
			break;
		}
		case 0x08:
		{
			ukljuceno = 4;	//gore
			break;
		}

	}
}

int main()
{
	unsigned long t0;

	//inicijalizacija portova:
	DDRB = 0x0f; //PB3-PB0 -> izlazi
	DDRC = 0x00; //port C -> ulaz
	DDRD = 0xff; //port D -> izlaz
	//inicijalizacija tajmera 0:
	PCICR = (1 << PCIE1); //dozvola prekida usled promene stanja; isto sto i PCICR = 0x02;
	PCMSK1 = 0xf; //pina PCINT10, ili pina PCINT8
	TCCR0A = 0x02; //tajmer 0: CTC mod
	TCCR0B = 0x03; //tajmer 0: fclk = fosc/64
	OCR0A = 249; //perioda tajmera 0: 250 Tclk (OCR0A + 1 = 250)
	TIMSK0 = 0x02; //dozvola prekida tajmera 0
	//usled dostizanja vrednosti registra OCR0A
	sei(); //I = 1 (dozvola prekida)

	while(1)
	{
		t0 = millis;

		while ((millis - t0) < 500); //pauza 500ms
		DISP_BAFER[0] = simboli[sati / 10];
		DISP_BAFER[1] = simboli[(sati % 10)];
		DISP_BAFER[2] = simboli[minute / 10];
		DISP_BAFER[3] = simboli[minute % 10];
		sekunde++;
		if(sekunde == 60)
		{
			sekunde = 0;
			minute++;
			if(minute == 60)
			{
				minute = 0;
				sati++;
				if(sati == 24)
				{
					sati = 0;
					minute = 0;
					sekunde = 0;
				}
			}
		}

		if(ukljuceno == 4 && flag == 1 && ukljuceno != prethodnoStanje)
		{
			ukljuceno = 1;
			sati++;
			if(sati == 24)
			{
				sati = 0;
			}
		}
		if(ukljuceno == 2 && flag == 1 && ukljuceno != prethodnoStanje)
		{
			ukljuceno = 1;
			sati--;
			if(sati == -1)
			{
				sati = 23;
			}
		}
		if(ukljuceno == 4 && flag == 2 && ukljuceno != prethodnoStanje)
		{
			ukljuceno = 3;
			minute++;
			if(minute == 60)
			{
				minute = 0;
			}
		}
		if(ukljuceno == 2 && flag == 2 && ukljuceno != prethodnoStanje)
		{
			ukljuceno = 3;
			minute--;
			if(minute == -1)
			{
				minute = 59;
			}
		}
		if(sati < 10)
		{
			DISP_BAFER[0] = 0xff;
		}
		prethodnoStanje = ukljuceno;
		if(prethodnoStanje == 4 || prethodnoStanje == 2)
		{
			prethodnoStanje = 0;
		}


		t0 = millis;
		while ((millis - t0) < 500); //pauza 500ms
		DISP_BAFER[1] = simboli[(sati % 10)] ^ 0x04;

	}

	return 0;
}
